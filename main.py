import asyncio
import logging
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.formatting import as_marked_list

import config
import keyboards

router = Router()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


class Planning(StatesGroup): # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Å–æ—Å—Ç–æ—è–Ω–∏—è)
	planner = State() 
	date_choise = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É
	setting_plan_name = State()
	checking_plans = State()
	chose_for_delete = State()

@router.message(Command("start"))
async def echo_msg(message: types.Message):
	await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}', reply_markup=keyboards.menu)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "menu")
async def openPlanner(query: types.CallbackQuery, state: FSMContext):
	await bot.send_message(query.message.chat.id, '–ú–µ–Ω—é', reply_markup=keyboards.menu)
	await state.clear()

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
@router.callback_query(F.data == "getCurrentTime")
async def writeTime(query: types.CallbackQuery):
	structTime = time.localtime(time.time()) # –í—Ä–µ–º—è —Ç–∏–ø–∞ struct_time(tm_year=2023 –∏ —Ç –¥)
	answerTime = '–í—Ä–µ–º—è ' + str(structTime.tm_hour) + ':' + str(structTime.tm_min) + ', –î–∞—Ç–∞ ' + time.strftime("%d.%m.%Y") #%H:%M:%S  –≤—Ä–µ–º—è, %d.%m.%Y –¥–∞—Ç–∞
	await bot.send_message(query.message.chat.id, answerTime)

# –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–ª–∞–Ω–Ω–µ—Ä–∞
@router.callback_query(F.data == "planner")
async def openPlanner(query: types.CallbackQuery, state: FSMContext):
	await bot.send_message(query.message.chat.id, '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á', reply_markup=keyboards.planner_kb)
	await state.set_state(Planning.planner)

# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á–∫—É
@router.callback_query(Planning.planner, F.data == "newPlan")
async def inputPlanName(query: types.CallbackQuery, state: FSMContext):
	await bot.send_message(query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è')
	await state.set_state(Planning.setting_plan_name)

# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∑–∞–ø–∏—Å–∞—Ç—å –≤ state data –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è
@router.message(Planning.setting_plan_name, F.text)
async def inputPlanTime(message: types.Message, state: FSMContext):
	await state.update_data(planName = message.text)
	await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã), –∫–æ–≥–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:')
	await state.set_state(Planning.date_choise)

#–ï—Å–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—à–µ–ª –Ω–µ —Ç–µ–∫—Å—Ç
@router.message(Planning.setting_plan_name)
async def inputPlanTime(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, '–£–ø—Å! –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –µ—â–µ —Ä–∞–∑')

# –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É scheduler'—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
@router.message(Planning.date_choise, F.text.regexp(r'\d{1,2}.\d{1,2}.\d{4}\s+\d{1,2}:\d{2}'))
async def timeGot(message: types.Message, state: FSMContext):
	try:
		gotTime = time.strptime(message.text, "%d.%m.%Y %H:%M") # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ struct_time(tm_year=2023 –∏ —Ç –¥)
		user_data = await state.get_data()
		jobsCntr = len(scheduler.get_jobs())
		jobid = f"job_{jobsCntr+1}_{message.chat.id}"
		scheduler.add_job(
			sendNotification,
			"date",
			run_date=datetime(gotTime.tm_year, gotTime.tm_mon, gotTime.tm_mday, gotTime.tm_hour, gotTime.tm_min),
			args=(message.chat.id, user_data['planName'], ), #—ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ touple
			name=user_data['planName'],
			id=jobid
		)
		await bot.send_message(message.chat.id, '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª!')
	except ValueError:
		# –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ (—Ç–∏–ø–∞ 40.13.2000 33:33)
		await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!')
	finally:
		await bot.send_message(message.chat.id, '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á', reply_markup=keyboards.planner_kb)
		await state.set_state(Planning.planner)

# –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
@router.message(Planning.date_choise)
async def timeGotIncorrect(message: types.Message):
	await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

# –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def sendNotification(chatid, text):
	await bot.send_message(chatid, f'–í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å —Å–µ–π—á–∞—Å {text}')

# –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(Planning.planner, F.data == "checkPlanner")
async def checkPlans(query: types.CallbackQuery, state: FSMContext):
	jobsList = scheduler.get_jobs()
	if(len(jobsList) == 0):
		await bot.send_message(query.message.chat.id, '–í –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø—É—Å—Ç–æ üëªüëÄ', reply_markup=keyboards.planner_kb)
		return
	itemsForDisplay = as_marked_list(*list(map(lambda x: f"{x.name} ({x.next_run_time.strftime('%d %b %Y, %H:%M')})", jobsList)), marker="‚úÖ  ")
	await bot.send_message(query.message.chat.id, **itemsForDisplay.as_kwargs(), reply_markup=keyboards.plans_list_kb)
	await state.set_state(Planning.checking_plans)

@router.callback_query(Planning.checking_plans, F.data == "clearPlanner")
async def clearPlanner(query: types.CallbackQuery, state: FSMContext):
	scheduler.remove_all_jobs()
	await bot.send_message(query.message.chat.id, '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=keyboards.menu)
	await state.clear()


@router.callback_query(Planning.checking_plans, F.data == "removePlan")
async def removePlan(query: types.CallbackQuery, state: FSMContext):
	jobsList = scheduler.get_jobs()
	dynamicKeyboard = keyboards.createKeyboard(jobsList)
	await bot.send_message(query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=dynamicKeyboard)
	await state.set_state(Planning.chose_for_delete)


@router.callback_query(Planning.chose_for_delete)
async def removingPlan(query: types.CallbackQuery, state: FSMContext):
	jobsList = scheduler.get_jobs()
	#idRemovingPlan = jobsList
	scheduler.remove_job(str(query.data))
	await bot.send_message(query.message.chat.id, f'–ó–∞–¥–∞—á–∞ {str(query.data)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
	await bot.send_message(query.message.chat.id, '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á', reply_markup=keyboards.planner_kb)
	await state.set_state(Planning.planner)


@router.message()
async def echoall(msg: types.Message):
	await msg.answer('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç(')

async def main():

	dp.include_router(router)

	await bot.delete_webhook(drop_pending_updates=True)
	scheduler.start()
	await dp.start_polling(bot)


if __name__ == "__main__":
	logging.basicConfig(level=logging.INFO)
	asyncio.run(main())